#+AUTHOR: esac <esac-io@tutanota.com>
#+PROPERTY: header-args :tangle no

* Introduction

  An simple =Elisp= package (scripts)  - a place to put small
  new functions and expressions to evaluated - little hacks
  to improve =Emacs= overall usability, living everything more
  organized and easy to manage.

  =VEX= was inspired by =[V]anilla [EX]tensions=.

  On =Emacs= every user it's also a developer,
  we twist and extend your programmable platform to meet our needs,
  to automatize boring tasks, to become more productive -
  using smart data/stream transformations, to quickly analyse data
  and processes of interest, and more, much more!

  This is probably a continuum for the =Emacs= user life spam,
  =forever= an =user developer=, taking more and more control,
  engaging our manipulative capabilities all day long.

  Usually, people do this directly in the configuration files -
  ~init.el, .emacs~, etc.. - as the =Elisp= interpreter do not
  differentiate them (an =Elisp= script is a sequence of declared
  =Forms= to be evaluate, that's all, does matter the intent of it).

  Although the generic aspect of it is great, as a side-effect, it's
  easy to become lost in the lack of organization, making difficult
  to extend/reuse/modify the code that was already written (for you
  and others).

  So, that's why =Vex= was created to pull all this new functions
  that depends only on the builtin functionalities of =Emacs= in
  the same place, outside of the ~init.el~ configuration file.

  By definition the new procedures should be just =little hacks=,
  small in nature.

* Dependencies
** Elisp

   - simple
   - files
   - completion

** Non-Elisp

   - transset
   - feh

* Tested on

  - Emacs 26.3
  - Emacs 28.0.50

* Install
** Manually

  Clone =Vex= repository to a arbitrary location:

  #+BEGIN_SRC sh

  $ git clone https://github.com/esac-io/vex ~/.emacs.d/site-elisp/vex

  #+END_SRC

  Add =Vex= directory to =load-path= in your
  Emacs initialization file (~init.el~) and load it.

  #+BEGIN_SRC emacs-lisp

  ;; add to load-path
  (add-to-list 'load-path "/replace/me/to/vex/full/path")

  ;; load vex basic features
  (require 'vex nil t)

  ;; load vex utilities
  (require 'vex-util nil t)

  #+END_SRC

  - Note: For a more dynamic approach:
    - =M-x load-library RET vex RET=
    - =M-x load-library RET vex-util RET=

** Compile

   * Note: Optional but recommended.

   To compile the files the the byte-compiled =Elisp= representation:

   #+BEGIN_SRC sh

   [at-vex-root-directory]$ make

   #+END_SRC

* Customize

  To see all the options inside =Emacs= and to customize it,
  uses: =M-x customize-group RET vex-util RET=.

  Just a few options are available related to the utilities:
  =transset= and =feh=.

* LICENSE
  MIT
* EOF
  All things change in a dynamic environment.
  Your effort to remain what you are is what limits you.
  | Puppet Master |
